//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace User.RegisterService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ISEL.ADEETC.SD", ConfigurationName="RegisterService.IRegister", CallbackContract=typeof(User.RegisterService.IRegisterCallback))]
    public interface IRegister {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ISEL.ADEETC.SD/IRegister/Subscribe", ReplyAction="http://ISEL.ADEETC.SD/IRegister/SubscribeResponse")]
        Interfaces.ChatUser[] Subscribe(Interfaces.ChatUser info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ISEL.ADEETC.SD/IRegister/Subscribe", ReplyAction="http://ISEL.ADEETC.SD/IRegister/SubscribeResponse")]
        System.Threading.Tasks.Task<Interfaces.ChatUser[]> SubscribeAsync(Interfaces.ChatUser info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ISEL.ADEETC.SD/IRegister/Unsubscribe", ReplyAction="http://ISEL.ADEETC.SD/IRegister/UnsubscribeResponse")]
        void Unsubscribe(Interfaces.ChatUser info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ISEL.ADEETC.SD/IRegister/Unsubscribe", ReplyAction="http://ISEL.ADEETC.SD/IRegister/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync(Interfaces.ChatUser info);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegisterCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ISEL.ADEETC.SD/IRegister/NotifySubscribe", ReplyAction="http://ISEL.ADEETC.SD/IRegister/NotifySubscribeResponse")]
        void NotifySubscribe(Interfaces.ChatUser info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ISEL.ADEETC.SD/IRegister/NotifyUnsubscribe", ReplyAction="http://ISEL.ADEETC.SD/IRegister/NotifyUnsubscribeResponse")]
        void NotifyUnsubscribe(Interfaces.ChatUser info);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegisterChannel : User.RegisterService.IRegister, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterClient : System.ServiceModel.DuplexClientBase<User.RegisterService.IRegister>, User.RegisterService.IRegister {
        
        public RegisterClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RegisterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RegisterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RegisterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RegisterClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Interfaces.ChatUser[] Subscribe(Interfaces.ChatUser info) {
            return base.Channel.Subscribe(info);
        }
        
        public System.Threading.Tasks.Task<Interfaces.ChatUser[]> SubscribeAsync(Interfaces.ChatUser info) {
            return base.Channel.SubscribeAsync(info);
        }
        
        public void Unsubscribe(Interfaces.ChatUser info) {
            base.Channel.Unsubscribe(info);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(Interfaces.ChatUser info) {
            return base.Channel.UnsubscribeAsync(info);
        }
    }
}
